// OpenDAW Agents with Collaboration Integration
// Generated by synxSphere collaboration integration

import {FloatArray, int, Procedure} from "std"
import WorkerUrl from "../worker/agents.ts?worker&url"
import {Entry, OpfsProtocol, PeakProtocol} from "fusion"
import {Communicator, Messenger} from "runtime"

// Import collaboration components
import { CollaborationManager } from '../collaboration/CollaborationManager'

const messenger = Messenger.for(new Worker(WorkerUrl, {type: "module"}))

export const PeakAgent = Communicator.sender<PeakProtocol>(messenger.channel("peaks"),
    router => new class implements PeakProtocol {
        async generateAsync(
            progress: Procedure<number>,
            shifts: Uint8Array,
            frames: ReadonlyArray<FloatArray>,
            numFrames: int,
            numChannels: int): Promise<ArrayBufferLike> {
            return router.dispatchAndReturn(this.generateAsync, progress, shifts, frames, numFrames, numChannels)
        }
    })

// Create the base OPFS agent
const baseOpfsAgent = Communicator.sender<OpfsProtocol>(messenger.channel("opfs"),
    router => new class implements OpfsProtocol {
        write(path: string, data: Uint8Array): Promise<void> {return router.dispatchAndReturn(this.write, path, data)}
        read(path: string): Promise<Uint8Array> {return router.dispatchAndReturn(this.read, path)}
        delete(path: string): Promise<void> {return router.dispatchAndReturn(this.delete, path)}
        list(path: string): Promise<ReadonlyArray<Entry>> {return router.dispatchAndReturn(this.list, path)}
    })

// Create a proxy that will route to the appropriate agent
let currentOpfsAgent = baseOpfsAgent
let collaborationInitialized = false
let collaborationManager: CollaborationManager | null = null

// Check for collaboration mode
const urlParams = new URLSearchParams(window.location.search)
const projectId = urlParams.get('projectId')
const userId = urlParams.get('userId')
const userName = urlParams.get('userName') || userId
const isCollaborative = urlParams.get('collaborative') === 'true'

console.log('üîç OpenDAW Collaboration Check:', { projectId, userId, isCollaborative })

if (isCollaborative && projectId && userId) {
    console.log('ü§ù Initializing collaboration mode...')
    
    try {
        // Initialize collaboration manager
        collaborationManager = new CollaborationManager({
            projectId,
            userId,
            userName: userName || userId,
            wsUrl: 'ws://localhost:3005',
            dbUrl: 'postgresql://opendaw:collaboration@localhost:5433/opendaw_collab'
        })
        
        // Initialize collaboration asynchronously
        collaborationManager.initialize(baseOpfsAgent).then((collaborativeAgent: any) => {
            console.log('‚úÖ Collaboration initialized successfully')
            
            // Switch to the collaborative agent
            currentOpfsAgent = collaborativeAgent
            collaborationInitialized = true
            
            // Add visual indicators
            const style = document.createElement('style')
            style.textContent = `
                .collaboration-active {
                    border-top: 2px solid #10b981 !important;
                }
                .collaboration-panel {
                    position: fixed;
                    top: 50px;
                    right: 10px;
                    background: rgba(0, 0, 0, 0.85);
                    color: white;
                    padding: 8px 10px;
                    border-radius: 6px;
                    font-family: system-ui, -apple-system, sans-serif;
                    font-size: 11px;
                    z-index: 9999;
                    border: 1px solid #10b981;
                    min-width: 140px;
                    max-width: 180px;
                    backdrop-filter: blur(4px);
                }
                .collaboration-panel h4 {
                    margin: 0 0 4px 0;
                    color: #10b981;
                    font-size: 12px;
                    font-weight: 600;
                }
                .collab-user {
                    display: flex;
                    align-items: center;
                    gap: 4px;
                    margin: 2px 0;
                    font-size: 10px;
                }
                .collab-status {
                    width: 6px;
                    height: 6px;
                    border-radius: 50%;
                    background: #10b981;
                    flex-shrink: 0;
                }
                .collab-info {
                    font-size: 10px;
                    color: #a0a0a0;
                    margin: 2px 0;
                }
            `
            document.head.appendChild(style)
            
            // Add collaboration panel to UI
            const panel = document.createElement('div')
            panel.className = 'collaboration-panel'
            panel.innerHTML = `
                <h4>ü§ù Collaboration</h4>
                <div class="collab-user">
                    <div class="collab-status"></div>
                    <span>${userName || userId}</span>
                </div>
                <div class="collab-info">Project: ${projectId}</div>
                <div class="collab-info" id="online-users">Users: 1</div>
            `
            document.body.appendChild(panel)
            
            // Set up event listeners for user join/leave events
            if (collaborationManager) {
                console.log('üéß Setting up collaboration event listeners...')
                
                // Listen for when other users join
                collaborationManager.onUserJoined((message: any) => {
                    console.log('üëã USER_JOIN event received:', message)
                    console.log('üëã User joined:', message.userId, 'Current user:', userId)
                    updateUserCount()
                })
                
                // Listen for when other users leave
                collaborationManager.onUserLeft((message: any) => {
                    console.log('üëã USER_LEAVE event received:', message)
                    console.log('üëã User left:', message.userId, 'Current user:', userId)
                    updateUserCount()
                })
                
                // Listen for sync responses which contain active user list
                collaborationManager.onSyncResponse((message: any) => {
                    console.log('üîÑ SYNC_RESPONSE event received:', message)
                    console.log('üîÑ Message data:', message.data)
                    if (message.data && message.data.activeUsers) {
                        const userCount = message.data.activeUsers.length
                        console.log('üë• Active users:', message.data.activeUsers, 'Count:', userCount)
                        const usersElement = document.getElementById('online-users')
                        if (usersElement) {
                            usersElement.textContent = `Users: ${userCount}`
                            console.log('‚úÖ Updated user count display to:', userCount)
                        } else {
                            console.warn('‚ùå Could not find online-users element')
                        }
                    } else {
                        console.warn('‚ö†Ô∏è No activeUsers in sync response data')
                    }
                })
                
                console.log('‚úÖ Event listeners set up successfully')
            } else {
                console.error('‚ùå CollaborationManager is null, cannot set up event listeners')
            }
            
            // Function to update user count by requesting sync
            function updateUserCount() {
                console.log('üîÑ updateUserCount() called')
                if (collaborationManager) {
                    console.log('üì° Requesting sync from server...')
                    collaborationManager.requestSync()
                } else {
                    console.error('‚ùå CollaborationManager is null in updateUserCount')
                }
            }
            
        }).catch(error => {
            console.error('‚ùå Failed to initialize collaboration:', error)
            console.log('üîÑ Falling back to local mode')
        })
        
    } catch (error) {
        console.error('‚ùå Collaboration setup failed:', error)
        console.log('üîÑ Using local mode')
    }
}

// Create a proxy agent that routes to the current agent
const proxyAgent = new class implements OpfsProtocol {
    write(path: string, data: Uint8Array): Promise<void> {
        console.log(`üìù OPFS Write (${collaborationInitialized ? 'COLLABORATIVE' : 'LOCAL'}): ${path}`)
        return currentOpfsAgent.write(path, data)
    }
    read(path: string): Promise<Uint8Array> {
        console.log(`üìñ OPFS Read (${collaborationInitialized ? 'COLLABORATIVE' : 'LOCAL'}): ${path}`)
        return currentOpfsAgent.read(path)
    }
    delete(path: string): Promise<void> {
        console.log(`üóëÔ∏è OPFS Delete (${collaborationInitialized ? 'COLLABORATIVE' : 'LOCAL'}): ${path}`)
        return currentOpfsAgent.delete(path)
    }
    list(path: string): Promise<ReadonlyArray<Entry>> {
        console.log(`üìã OPFS List (${collaborationInitialized ? 'COLLABORATIVE' : 'LOCAL'}): ${path}`)
        return currentOpfsAgent.list(path)
    }
}

// Export the proxy agent
export const OpfsAgent = proxyAgent
